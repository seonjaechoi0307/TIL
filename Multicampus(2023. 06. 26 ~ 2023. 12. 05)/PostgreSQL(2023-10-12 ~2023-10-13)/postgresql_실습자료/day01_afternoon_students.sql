-- 비교연산자
-- 첫번째 : NULL의 결과를 알 수 없으므로 NULL
-- 두번째 : IS_FALSE는 결과가 FALSE가 아니므로 FALSE가 된다. 
-- 코드

-- 조건문 함수
-- CASE 함수
-- 코드

-- COALESCE 함수
-- NULL값을 다른 기본 값으로 대체할 때 자주 사용
-- 코드

-- COALESCE 함수 이용하여 score 컬럼이 NULL값 시, 그 값을 0점으로 바꾼다. 
-- CASE 함수를 이용하여 다시 등급 나누기. 
-- 코드

-- NULLIF 함수
-- NULL을 이용하는 가장 기본적인 조건문 함수
-- NULLIF(<매개변수 1>, <매개변수 2>)
-- 매개변수1과 매개변수2가 같은 경우 NULL을 반환
-- 서로 다른 경우 매개변수 1을 반환
-- 코드

-- 나눗셈
-- 코드

-- 에러
-- 코드

-- division_by_zero 테이블 활용
-- 코드

-- 배열 연산자와 함수
-- 코드

-- 두번째 쿼리문을 보면 3번째 원소의 대소관계와는 상관없이 두번째 원소의 대소관계가 영향을 미침

-- 첫번째 array가 두번째 array를 포함하고 있는가?
-- 코드

-- 두번째 array가 첫번째 array를 포함하고 있는가?
-- 코드 

-- 2차원 배열 입력
CREATE TABLE td_array(
	id     serial, 
	name   varchar(30), 
	schedule integer[][] -- 2차원 배열 생성
);


-- 2차원 배열 입력받는 방법 : ''중괄호 사용
-- 코드

-- 2차원 배열 입력받는 방법 : ARRAY[]
-- 코드

-- 배열 함수
-- array_append(<배열>, <원소>)
-- 코드

-- array_prepend(<원소>, <배열>)
-- 코드

-- array_remove(<배열>, <원소>)
-- 코드

-- array_replace(<배열>, <기존 원소1>, <새로운 원소2>)
-- 코드

-- array_cat() 두 배열 병합
-- 코드

------------------------
-- JSON 연산자와 함수
------------------------
-- 코드

-- JSON 다층 구조
-- 코드
-- 코드

-- JSONB 연산자
-- 코드
-- 코드

-- 키 값이 1개 이상 존재시 ?| 연산자 사용
-- 코드

-- ?| 연산자와 다르게 가장 바깥 단의 JSONB에 배열 속의 원소가 "키 값"으로 모두 존재하는 지 물어볼 때 
-- 코드

-- || 연산자 활용하여 병합
-- 코드

-- JSONB 속의 데이터 삭제
-- 코드

-- 복수의 원소 삭제
-- 코드

-- JSONB 배열, 인덱스 번호 활용하여 삭제
-- 코드

-- JSON 생성함수
-- 코드

-- JSON 처리함수
-- 코드



------------------------
-- 날짜 및 시간 연산자와 함수
------------------------

-- 날짜 및 시간 연산자
-- 코드

-- 시간간격
-- 코드

-- 코드

-- 현재 날짜와 시간
-- 코드

-- 코드

-- 날짜 및 시간 기본함수
-- 코드

-- 날짜 및 시간 응용 함수
-- 코드

-- 현재 날짜 분기
-- 코드

-- date_trunc 함수
-- 코드

-- 연도, 월 정보만을 남기고 나머지 모든 정보를 0으로 없앰
-- 코드

------------------------
-- 자주 쓰이는 연산자와 함수
------------------------

-- 코드

-- 두 번째 코드는 exception 테이블에 아무런 데이터가 없기 때문에 false를 입력 받음
-- 코드

-- ANY와 SOME 연산자 : 의미상 서로 같음
-- amount 컬럼 중에서 10이라는 행이 존재
-- 코드

-- amount 컬럼 중에서 11이라는 행이 존재하지 않음
-- 코드

-- amount 컬럼 로우 값 하나하나 10과 크거나 같은지 비교
-- 코드


------------------------
-- 패턴 매칭 연산자
------------------------
-- 코드

-- Similar to 연산자
-- 코드


-- 병합 연산자
-- 코드
	   
-- 문자열 함수
-- 코드

-- Substring
-- 코드
	
-- 앞 5글자만 표시되도록 한다. 
-- 코드

-- 문자열 결합
-- 코드

-- 문자열 위치 찾기
-- 

------------------------------------------------
-- (실습) 고등학교 졸업생들의 진로 분석
------------------------------------------------
-- 코드

-- 1. 한해 동안 특수학교에서 졸업한 학생의 수가 25명 이상이었던 학교 이름과 남, 여 졸업생 수를 출력하라
-- 코드

-- 2. 2015년에 남, 여 통학 취업률이 50%가 넘은 학교의 지역명, 이름과 취업률(%)를 출력하라
-- 코드
	
-- 경기도 고양시 일산 지역에 있는 고등학교의 각 연도별 졸업생 정보를 다음의 조건을 만족하도록 출력하라
--- 진학률을 기준으로 내림차순으로 출력하라
--- 졸업생이 없으면 진학률은 0%로 표시한다. 
--- 지역명에 “고양시 일산”이 포함되어 있는 로우를 검색해야 한다. 
--- 출력될 때 다음 예시와 같이 기준연도는 연도 숫자로, 지역명에는 “경기도 고양시＂라는 문자열을 뺀 뒷부분만 보이도록 한다. 

-- 코드

-- 데이터 그룹화
-- 코드

-- GROUP BY
-- 코드

-- HAVING절 
-- 코드

-- 코드

------------------------------------------------
-- 집계함수
------------------------------------------------
-- 코드

-- 가장 높은 점수인 상품은 무엇인가?
-- 오류 코드
SELECT item_type, item_id FROM rating
WHERE rating = max(rating);

-- 서브쿼리 필요
-- 코드


------------------------------------------------
-- 불리언 연산 집계함수
------------------------------------------------
-- 코드

-- 짜장면 관련 상품 중에서 매운 상품이 있는지 찾아보기
-- 짜장면 상품 중 매운 것은 없다. 
-- 코드

-- 배열을 담는 집계함수
-- 코드

-- GROUP BY와 함께 사용
-- 코드


------------------------------------------------
-- JSON 집계함수
------------------------------------------------

-- 출력하기 
-- 코드

-- json_agg 함수 활용
-- 출력결과를 비교한다. 
-- 코드

-- 코드

-- jsonb_agg 함수 활용
-- 출력결과를 비교한다.
-- 코드

-- 코드

-- json_object_agg
-- 코드

-- jsonb_object_agg
-- 코드

-- ramen 테이블의 id-name 컬럼의 row를 각각 키-값 형태로 지정한 json 타입 데이터가 된다. 
-- GROUP BY 코드 입력
--- 코드

-- 기존 쿼리 대비 공백이 사라짐. 
-- 코드

------------------------------------------------
-- 다수의 집계함수 사용하기
------------------------------------------------

-- 총 행의 갯수와 최대 점수 구하기
-- 코드

-- GROUP BY 활용, 각 아이템의 최대점수, 최소점수 동시에 출력
-- 코드

-- 각 아이템의 최대 및 최소 점수가 아닌 사용자가 준 점수 중 개개인의 최대로 매긴 점수, 최소로 매긴 점수를 집계한다. 
-- 코드

-- 평균을 추가한다. 
-- 코드

-- HAVING 절을 통해 avg(rating) > 2가 되도록 쿼리를 작성한다. 
-- 코드

-- JSON 집계함수를 이용해 데이터 추출
-- 코드

-- HAVING 절 사용
-- 코드

-- 평균점수가 2점 보다 큰 '유저와 평가점수' 쌍을 포함한 그룹만 출력하도록 한다. 
-- 코드

------------------------------------------------
-- 시군구별 인구 통계 분석
------------------------------------------------

-- 전국의 인구수 총합을 연도별로 표시한다. 
-- 코드


-- 최근 5년간 전국의 한 세대당 평균 인구수(총인구수/세대수)를 출력하라. 
-- 코드

-- 최근 5년간 (남자 인구수)/(여자 인구수) 성비의 평균을 행정구역별로 출력하고 가장 높은 지역이 어디인지 알아내라. 매 연도마다 성비 가중치는 같다. 
-- 코드

------------------------------------------------
-- 여러 개의 테이블을 로우로 연결하기
------------------------------------------------

-- 명령어의 전제조건 : (1) 컬럼의 갯수가 동일해야 한다. / (2) 같은 위치에 동일한 형식과 의미의 정보가 담겨야 한다. 
-- 아래 두개의 명령어를 비교한다. 
-- 코드


-- UNION 명령어의 중복 제거 
-- 두 테이블에 공통되는 행만 남기는 명령어 

-- 코드

-- EXCEPT 명령어
-- EXCEPT ALL 명령어
-- 코드

-- 다양한 상황에서 데이터 결합하기 
-- 상황 1. 어디 소속 테이블인지 확인하며 표현하기 
-- 코드

-- 상황 2. 라면과 통조림, 음료는 수량이 20개 이하기 되면 주문 발주를 넣는다. 
-- 각각의 상품 종류, 발주 넣어야 할 상품 배열 두 컬럼이 나타나도록 작성한다. 
-- 코드

------------------------------------------------
-- FROM과 WHERE 절을 이용한 데이터 결합
------------------------------------------------
-- 코드

-- CROSS JOIN
-- 위 코드와 비교한다. 
-- 두 테이블의 각각의 행이 서로 한번씩 결합시키는 것을 교차 조인이라고 함. 
-- 코드

-- WHERE절로 결합된 데이터 고르기
-- 코드

------------------------------------------------
-- JOIN을 이용한 데이터 결합
------------------------------------------------

-- 코드 

-- 이 쿼리문을 JOIN문으로 이용하여 변경한다. 
-- 코드

-- 두 쿼리문 모두 동일한 계산 방식 사용. 
-- 코드
		
-- 연결된 정보가 없다면 NULL값으로 출력함. 
-- RIGHT JOIN은 LEFT JOIN으로 바꾸면 반대 상황이 나온다. 
-- 코드

-- FULL OUTER JOIN
-- 코드
	
-- 실습
-- 코드

-- 문제 1. 교차로에서 사고자가 5명인 이상인 대형 사고는 어느 시도, 시군구에서 발생했는지 사고자 수로 내림차순하여 출력한다. 
-- 코드

-- 문제 2. 세대수 대비 사망자수가 많은 순으로 시도, 시군구를 출력한다. 
-- 코드

-- 문제 3. 광역단체(시도)의 각 시군구 평균 사고 횟수 대비 각 시군구가 얼만큼 사고가 더 나는지 증감을 표로 표시한다. 
-- 1단계 : 각 시도의 시, 군, 구별 평균 사고횟수가 출력되는 쿼리문 작성
-- 2단계 : 시군구구의 사고 횟수가 표현된 쿼리문을 JOIN으로 연결하여 평균 대비 사고 횟수 구하기
-- 시도 평균 대비 사고횟수가 가장 많은 시군구는 경남 창원시
-- 코드


